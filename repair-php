#!/bin/bash
set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")"
pwd=$PWD

usage="Usage: ./repair-php VERSION"

if [[ $# > 0 ]]; then
    version="$1"
    shift
else
    echo "$usage"
    exit 1
fi

# parse options
skip_instrument=0
debug=0
options=""
while :; do
    if [[ $# > 0 ]]; then
        case $1 in
            --skip-instrument)
                skip_instrument=1
                shift
                ;;
            --debug)
                debug=1
                shift
                ;;
            --*)
                options="$options $1"
                shift
                ;;
            *)
                if [[ $1 =~ ^[a-zA-Z0-9/.\-]+$ ]]; then
                    options="$options $1"
                    shift
                else
                    # Default case: No more options, so break out of the loop.
                    break
                fi
        esac
    else
        break
    fi
done

test_abbrev="T"
if [[ $test_abbrev == "T" ]]; then
    test_univ=$(readlink -f "$(pwd)/.aux/php/TEST_UNIV_ABBREV")
else
    test_univ=$(readlink -f "$(pwd)/.aux/php/TEST_UNIV_FULL")
fi

echo "[repair-php] debug: $debug"
if [[ $debug == 0 ]]; then
    test_suite=$(seq `cat $test_univ | wc -l`)
else
    test_suite=( "2" "4" )
fi

# Common functions -------------------------------------------------------------

# replaces within "$3" lines starting from the only occurrence of symbol "$2" in file "$1"
replace-in-range () {
    local file="$1"
    local symbol="$2"
    local length="$3"
    local original="$4"
    local replacement="$5"

    local begin=$(grep -n "$symbol" "$file" | cut -d : -f 1)
    local end=$(( begin + length ))

    sed -i "$begin,$end{s/$original/$replacement/;}" "$file"
}

replace-all-in-range () {
    local file="$1"
    local symbol="$2"
    local length="$3"
    local original="$4"
    local replacement="$5"

    local begin=$(grep -n "$symbol" "$file" | cut -d : -f 1)
    local end=$(( begin + length ))

    sed -i "$begin,$end{s/$original/$replacement/g;}" "$file"
}

restore_original () {
    local src="$1"
    echo "[repair-php] restore $src"
    if [ -e $src.org ]; then
        # restore the original
        cp $src.org $src
    else
        # prepare the org file
        cp $src $src.org
    fi
}

add-header () {
    local file="$1"
    sed -i '1s/^/#ifndef ANGELIX_OUTPUT\n/' "$file"
    sed -i '2s/^/#define ANGELIX_OUTPUT(type, expr, id) expr\n/' "$file"
    sed -i '3s/^/#define ANGELIX_REACHABLE(id)\n/' "$file"
    sed -i '4s/^/#endif\n/' "$file"

    sed -i '5s/^/#ifndef ANGELIX_EXPR\n/' "$file"
    sed -i '6s/^/#define ANGELIX_EXPR(dc, typename, expr, bl, bc, el, ec, env_ids, env_vals, env_size) expr\n/' "$file"
    sed -i '7s/^/#endif\n/' "$file"
}

# PHP ----------------------------------------------------------------------

add-angelix-runner () {
    local script="$1"
    local call="$2"
    local line=$(grep -n "$call" "$script" | cut -d : -f 1)
    sed -i "$line"'s/^/(export MEMCHECK=${ANGELIX_RUN:-eval}; /' "$script"
    sed -i "$line"'s/$/)/' "$script"
}

instrument_common () {
    local directory="$1"

####### main.c ################################################################

    local src1="$directory/php/main/main.c"
    restore_original $src1
    add-header $src1

    sed -i '1s/^/#define NOT_IMPLEMENTED 255\n/' $src1

    sed -i 's/^PHPAPI int (\*php_register_internal_extensions_func)(TSRMLS_D)/\
int _prefix(const char *pre, const char *str)\
{\
\tif (!str || !pre)\
\t\treturn 0;\
\treturn strncmp(pre, str, strlen(pre)) == 0;\
}\
\
PHPAPI int (*php_register_internal_extensions_func)(TSRMLS_D)/g' $src1

    sed -i 's/^PHPAPI int (\*php_register_internal_extensions_func)(TSRMLS_D)/\
int _suffix(const char *suffix, const char *str)\
{\
\tif (!str || !suffix)\
\t\treturn 0;\
\tsize_t lenstr = strlen(str);\
\tsize_t lensuffix = strlen(suffix);\
\tif (lensuffix >  lenstr)\
\t\treturn 0;\
\treturn strncmp(str + lenstr - lensuffix, suffix, lensuffix) == 0;\
}\
\
PHPAPI int (*php_register_internal_extensions_func)(TSRMLS_D)/g' $src1

angelix_output_php_error="va_list args;\n \
\n\
\tif(_prefix(\"is not implemented!\", format)) {\n \
\t\tANGELIX_OUTPUT(int, NOT_IMPLEMENTED, \"php_error\");\n \
\t}"

    replace-in-range "$src1" \
        '^PHPAPI void php_error_docref0' \
        5 \
        'va_list args;' \
        "$angelix_output_php_error"

    replace-in-range "$src1" \
        '^PHPAPI void php_error_docref1' \
        5 \
        'va_list args;' \
        "$angelix_output_php_error"

    replace-in-range "$src1" \
        '^PHPAPI void php_error_docref2' \
        5 \
        'va_list args;' \
        "$angelix_output_php_error"

    replace-in-range "$src1" \
        '^PHPAPI int php_printf' \
        10 \
        'TSRMLS_FETCH();' \
        'TSRMLS_FETCH();\
\tANGELIX_OUTPUT(int, strlen(format), "php_out");'

#### php_cli.c ###################################################################

    local src2="$directory/php/sapi/cli/php_cli.c"
    restore_original $src2
    add-header $src2

    sed -i 's/exit(exit_status);/exit(ANGELIX_OUTPUT(int, exit_status, "exit_status"));/' $src2

#### zend.c ###################################################################

    local src3="$directory/php/Zend/zend.c"
    restore_original $src3
    add-header $src3

    sed -i '1s/^/#define ARRAY_TYPE 255\n/' $src3
    sed -i '2s/^/#define OBJECT_TYPE 254\n/' $src3

    sed -i '3s/^/#define OTHER_ZEND_ERROR 255\n/' $src3
    sed -i '4s/^/#define INVALID_ARGUMENT 254\n/' $src3
    sed -i '5s/^/#define UNDEF_PROP 253\n/' $src3
    sed -i '6s/^/#define UNINIT_STR_OFFSET 252\n/' $src3

    sed -i 's/ZEND_PUTS_EX(\"Array\\n\");/ANGELIX_OUTPUT(int, ARRAY_TYPE, \"zend_type\"); ZEND_PUTS_EX(\"Array\\n\");/g' $src3
    sed -i 's/ZEND_PUTS_EX(\" Object\\n\");/ANGELIX_OUTPUT(int, OBJECT_TYPE, \"zend_type\"); ZEND_PUTS_EX(\" Object\\n\");/g' $src3

    replace-in-range "$src3" \
        '^ZEND_API void zend_error' \
        20 \
        'TSRMLS_FETCH();' \
        'TSRMLS_FETCH();\
\tANGELIX_REACHABLE("zend_error");\
\tif(_prefix(\"Invalid argument\", format)) {\
\t\tANGELIX_OUTPUT(int, INVALID_ARGUMENT, \"zend_error\");\
\t}\
\telse if(_prefix(\"Undefined property\", format)) {\
\t\tANGELIX_OUTPUT(int, UNDEF_PROP, \"zend_error\");\
\t}\
\telse if(_prefix(\"Uninitialized string offset\", format)) {\
\t\tANGELIX_OUTPUT(int, UNINIT_STR_OFFSET, \"zend_error\");\
\t}\
\telse {\
\t\tANGELIX_OUTPUT(int, OTHER_ZEND_ERROR, \"zend_error\");\
\t}\
'

#### output.c ###################################################################

    local src4="$directory/php/main/output.c"
    restore_original $src4
    add-header $src4

    replace-in-range "$src4" \
        '^PHPAPI int php_output_write(const char \*str, size_t len TSRMLS_DC)' \
        10 \
        'return (int) len;' \
        'ANGELIX_OUTPUT(int, (int) len, \"php_output_write\");\
\treturn (int) len;'

#### url_scanner_ex.c ############################################################

    local src5="$directory/php/ext/standard/url_scanner_ex.c"
    restore_original $src5
    sed -i 's/if (do_flush)/if (!(do_flush == 0))/g' $src5
    sed -i 's/if (ctx->buf.len)/if (!(ctx->buf.len == 0))/g' $src5

#### zend_object_handlers.c ######################################################

    local src6="$directory/php/Zend/zend_object_handlers.c"
    restore_original $src6
    sed -i 's/if (retval)/if (!(retval == 0))/g' $src6
}


instrument () {
    local directory="$1"

    case $version in
        307931-307934 | 2011-02-01-01745fa657-1f49902999 )
            local src1="$directory/php/main/output.c"
            restore_original $src1
            ;;
        # 2011-04-06-187eb235fe-2e25ec9eb7 )
        #     local src1="$directory/php/Zend/zend_object_handlers.c"
        #     sed -i 's/if (retval)/if (!(retval == 0))/g' $src1
        #     ;;
        309579-309580 | 2011-03-23-63673a533f-2adf58cfcf )
            local src="$directory/php/ext/date/php_date.c"
            restore_original $src

            sed -i '1s/^/#define UNKNOWN_OR_BAD_FORMAT 255\n/' $src
            sed -i '2s/^/#define FAILED_TO_PARSE_INTERVAL 254\n/' $src
            sed -i '3s/^/#define DID_NOT_CONTAIN_START_DATE 253\n/' $src
            sed -i '4s/^/#define DID_NOT_CONTAIN_INTERVAL 252\n/' $src
            sed -i '5s/^/#define DID_NOT_CONTAIN_END_DATE 251\n/' $src

            add-header "$src"

            sed -i 's/php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown or bad format (\%s)\", format);/ANGELIX_OUTPUT(int, UNKNOWN_OR_BAD_FORMAT, \"error\"); php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown or bad format (\%s)\", format);/g' $src
            sed -i 's/php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to parse interval (\%s)\", format);/ANGELIX_OUTPUT(int, FAILED_TO_PARSE_INTERVAL, \"error\"); php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to parse interval (\%s)\", format);/g' $src
            sed -i "s/php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain a start date.\", isostr);/ANGELIX_OUTPUT(int, DID_NOT_CONTAIN_START_DATE, \"error\"); php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain a start date.\", isostr);/g" $src
            sed -i "s/php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain an interval.\", isostr);/ANGELIX_OUTPUT(int, DID_NOT_CONTAIN_INTERVAL, \"error\"); php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain an interval.\", isostr);/g" $src
            sed -i "s/php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain an end date or a recurrence count.\", isostr);/ANGELIX_OUTPUT(int, DID_NOT_CONTAIN_END_DATE, \"error\"); php_error_docref(NULL TSRMLS_CC, E_WARNING, \"The ISO interval '%s' did not contain an end date or a recurrence count.\", isostr);/g" $src
            sed -i "s/if (isostr_len) {/if (isostr_len != 0) {/g" $src
            ;;
        309111-309159 | 2011-03-11-d890ece3fc-6e74d95f34 )
            local src1="$directory/php/ext/standard/url.c"
            restore_original $src1
            add-header "$src1"

            sed -i "s/if ((p = memchr(s, '?', (ue - s)))) {/if ((53 != 49) \&\& (p = memchr(s, '?', (ue - s)))) {/g" $src1

            replace-in-range "$src1" \
                '^PHP_FUNCTION(parse_url)' \
                20 \
                'RETURN_FALSE;' \
                'ANGELIX_OUTPUT(int, 0, \"parse_url_out\");\
\t\tRETURN_FALSE;'

            replace-in-range "$src1" \
                '^PHP_FUNCTION(parse_url)' \
                25 \
                'if (key > -1) {' \
                'ANGELIX_OUTPUT(int, strlen(resource->path), \"parse_url_out\");\
\tif (key > -1) {'
            ;;
        309892-309910 | 2011-04-02-70075bc84c-5a8c917c37 )
            local src1="$directory/php/ext/standard/string.c"
            restore_original $src1
            add-header $src1

            replace-all-in-range "$src1" \
                '^PHP_FUNCTION(substr_compare)' \
               55 \
                'RETURN_FALSE;' \
                'ANGELIX_OUTPUT(int, 0, \"substr_compare_out\");\
\t\tRETURN_FALSE;'

            replace-in-range "$src1" \
                '^PHP_FUNCTION(substr_compare)' \
               80 \
                'zend_binary_strncmp(s1 + offset, (s1_len - offset), s2, s2_len, cmp_len)' \
                'ANGELIX_OUTPUT(int, zend_binary_strncmp(s1 + offset, (s1_len - offset), s2, s2_len, cmp_len), \"substr_compare_out\")'

            replace-in-range "$src1" \
                '^PHP_FUNCTION(substr_compare)' \
               80 \
                'zend_binary_strncasecmp(s1 + offset, (s1_len - offset), s2, s2_len, cmp_len)' \
                'ANGELIX_OUTPUT(int, zend_binary_strncasecmp(s1 + offset, (s1_len - offset), s2, s2_len, cmp_len), \"substr_compare_out\")'
            ;;
        308262-308315 | 2011-02-11-f912a2d087-b84967d3e2 )
            local src1="$directory/php/Zend/zend_execute.c"
            restore_original $src1
            add-header $src1

            replace-all-in-range "$src1" \
                '^static void zend_fetch_dimension_address_read' \
                95 \
                'return;' \
                'ANGELIX_REACHABLE("return"); return;'
            sed -i 's/if (Z_LVAL_P(dim) < 0 || Z_STRLEN_P(container) <= Z_LVAL_P(dim))/if ((Z_LVAL_P(dim) < 0 || Z_STRLEN_P(container) <= Z_LVAL_P(dim)) \&\& (0 == 0))/g' $src1

            local src2="$directory/php/main/output.c"
            restore_original $src2
            ;;
        308734-308761 | 2011-02-27-e65d361fde-1d984a7ffd )
            local src1="$directory/php/ext/tokenizer/tokenizer.c"
            restore_original $src1

            replace-in-range "$src1" \
                '^static void tokenize' \
                55 \
                'token_line = CG(zend_lineno);' \
                'token_line = CG(zend_lineno);\
\t\tif (0 == 1) break;'

            replace-in-range "$src1" \
                '^static void tokenize' \
                15 \
                'int token_type;' \
                'int token_type = 1;'

            local src2=".aux/php/php-run-tests.c"
            restore_original $src2

            replace-in-range "$src2" \
                '^int main(int argc, char\*\* argv)' \
                30 \
                'if (num < 0 || num >= length)' \
                'if (num < 0 || num >= length || num == 8208)'
            ;;
        309688-309716 | 2011-03-25-8138f7de40-3acdca4703 )
            local src1="$directory/php/ext/phar/phar_object.c"
            restore_original $src1

            sed -i 's/if (SUCCESS == zend_hash_find/if (1 \&\& SUCCESS == zend_hash_find/g' $src1
            sed -i 's/if (SUCCESS == phar_split_fname/if (1 \&\& SUCCESS == phar_split_fname/g' $src1

            replace-in-range "$src1" \
                '^PHP_METHOD(Phar, mount)' \
                10 \
                'phar_archive_data \*\*pphar;' \
                'phar_archive_data \*\*pphar;\
\tHashTable *fname_map = \&(PHAR_GLOBALS->phar_fname_map);\
\tulong nNextFreeElement = fname_map->nNextFreeElement;\
\tBucket **arBuckets = fname_map->arBuckets;\
\tzend_bool persistent = fname_map->persistent;'

            sed -i 's/if (cont_str)/if (!(cont_str == 0))/g' $src1
            sed -i 's/if (error)/if (!(error == 0))/g' $src1
            sed -i 's/if (localname)/if (!(localname == 0))/g' $src1
            ;;
        310370-310389 | 2011-04-19-11941b3fd2-821d7169d9 )
            local src1="$directory/php/Zend/zend_closures.c"
            restore_original $src1

            replace-in-range "$src1" \
                '^static void zend_closure_free_storage' \
                10 \
                'zend_closure \*closure = (zend_closure \*)object;' \
                'zend_closure \*closure = (zend_closure \*)object;\
\tzval *c_ptr = closure->this_ptr;'

            local src2=".aux/php/php-run-tests.c"
            restore_original $src2

            replace-in-range "$src2" \
                '^int main(int argc, char\*\* argv)' \
                30 \
                'if (num < 0 || num >= length)' \
                'if (num < 0 || num >= length || num == 1259-1)'
            ;;
        311346-311348 | 2011-05-24-b60f6774dc-1056c57fa9 )
            cp $directory/php/Zend/zend_multiply.h $directory/php/Zend/zend_multiply.h.bak
            cp .aux/php/Zend/zend_multiply.h $directory/php/Zend/zend_multiply.h

            cp $directory/php/Zend/zend_vm_execute.h $directory/php/Zend/zend_vm_execute.h.bak
            cp .aux/php/Zend/zend_vm_execute.h $directory/php/Zend/zend_vm_execute.h

            local src1="$directory/php/main/output.c"
            restore_original $src1
            add-header $src1

            sed -i 's/php_output_write(context.out.data, context.out.used TSRMLS_CC);/ANGELIX_OUTPUT(int, context.out.used, \"php_output\");\n\t\t\tphp_output_write(context.out.data, context.out.used TSRMLS_CC);/g' $src1
            ;;
    esac
}

instrument2 () {
    local directory="$1"

    case $version in
        310370-310389 | 2011-04-19-11941b3fd2-821d7169d9 )
            local src1="$directory/php/Zend/zend_closures.c"
            restore_original $src1

            replace-in-range "$src1" \
                '^static void zend_closure_free_storage' \
                10 \
                'if (closure->func.type == ZEND_USER_FUNCTION) {' \
                'if (closure->func.type == ZEND_USER_FUNCTION \&\& !closure->this_ptr) {'
            ;;
    esac
}

repair-php () {
    local directory="$1"
    local golden_directory="$2"
    local src="$directory/php"
    local buggy=$(cat "$directory/bugged-program.txt")
    local experiments_dir="$pwd"

    local buggy_file="$src/$buggy"
    add-header $buggy_file

    local php_oracle_file=$(readlink -f "${experiments_dir}/.aux/php/php-oracle")
    local php_transform_file=$(readlink -f "${experiments_dir}/.aux/php/php-transform")
    local php_build_file=$(readlink -f "${experiments_dir}/.aux/php/php-build")
    local php_configure_file=$(readlink -f "${experiments_dir}/.aux/php/php-configure")

    # Make php-oracle
    local test_log_file=php-oracle.log
    local run_tests_script=$(readlink -f "${experiments_dir}/.aux/php/php-run-tests")
    local php_helper_script=$(readlink -f "${experiments_dir}/.aux/php/php-helper.php")

    # Make php-transform
    local aux=$(readlink -f "${experiments_dir}/.aux")
    local main_c_appendix=$(readlink -f "${experiments_dir}/.aux/php/main/main.c.appendix")
    local php_h_appendix=$(readlink -f "${experiments_dir}/.aux/php/main/php.h.appendix")

    local golden="$golden_directory/php"
    echo "[repair-php] options: $options"
    echo "[repair-php] angelix $src $buggy $php_oracle_file $test_suite --golden $golden --configure $php_configure_file --build $php_build_file $options"
    angelix "$src" "$buggy" $php_oracle_file $test_suite \
        --golden "$golden" \
        --configure $php_configure_file \
        --build $php_build_file \
        $options
}

# Main -------------------------------------------------------------------------

directory="php-bug-${version}"
golden_directory="php-fix-${version}"

restore_original ".aux/php/php-run-tests.c"
instrument_common "$directory"
instrument "$directory"
instrument_common "$golden_directory"
instrument "$golden_directory"
instrument2 "$golden_directory"

pushd .aux/php > /dev/null
gcc -o php-run-tests php-run-tests.c
popd > /dev/null

repair-php "$directory" "$golden_directory"
