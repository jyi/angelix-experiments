--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -4241,14 +4241,14 @@
   uint32 i, max_width, max_length, zwidth, zlength, buffsize;
   uint32 x1, x2, y1, y2;
 
-  if (image->res_unit != RESUNIT_INCH && image->res_unit != RESUNIT_CENTIMETER)
+  if (((image->res_unit != 3) && (image->res_unit != 3)))
     {
     xres = 1.0;
     yres = 1.0;
     }
   else
     {
-    if (((image->xres == 0) || (image->yres == 0)) &&
+    if ((((image->xres == 0) || (image->yres == 0))) &&
 	((crop->crop_mode & CROP_REGIONS) || (crop->crop_mode & CROP_MARGINS) ||
  	 (crop->crop_mode & CROP_LENGTH)  || (crop->crop_mode & CROP_WIDTH)))
       {
@@ -5011,7 +5011,7 @@
          image->orientation = ORIENTATION_TOPLEFT;
    }
 
-  if ((bps == 0) || (spp == 0))
+  if (((bps == 0) || (spp == 0)))
     {
     TIFFError("loadImage", "Invalid samples per pixel (%d) or bits per sample (%d)",
 	       spp, bps);
@@ -5036,14 +5036,14 @@
     stsize = TIFFStripSize(in);
     nstrips = TIFFNumberOfStrips(in);
     buffsize = stsize * nstrips;
-    if (dump->infile != NULL)
+    if ((dump->infile != 0))
       dump_info (dump->infile, dump->format, "",
                  "Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u",
 		 stsize, nstrips, rowsperstrip, scanlinesize);
     }
 
   read_buff = *read_ptr;
-  if (!read_buff)
+  if ((! read_buff))
     read_buff = (unsigned char *)_TIFFmalloc(buffsize);
   else
     {
@@ -5060,7 +5060,7 @@
       }
     }
 
-  if (!read_buff)
+  if ((! read_buff))
     {
     TIFFError("loadImage", "Unable to allocate/reallocate read buffer");
     return (-1);
@@ -5075,7 +5075,7 @@
    */
   switch (readunit) {
     case STRIP:
-         if (planar == PLANARCONFIG_CONTIG)
+         if ((planar == 1))
            {
 	   if (!(readContigStripsIntoBuffer(in, read_buff, length, width, spp)))
 	     {
@@ -5115,7 +5115,7 @@
           return (-1);
           break;
     }
-  if ((dump->infile != NULL) && (dump->level == 2))
+  if (((dump->infile != 0) && (dump->level == 2)))
     {
     dump_info  (dump->infile, dump->format, "loadImage", 
                 "Image width %d, length %d, Raw image data, %4d bytes",
