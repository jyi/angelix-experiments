#!/bin/bash

usage="Usage: ./expriment-gmp id"

if [[ $# > 0 ]]; then
    id="$1"
    shift
else
    echo "$usage"
    exit 1
fi

versions=( "14166-14167" )

strategies=( "guided" )
# strategies=( "symbolic" )

group_sizes=( 1 )

target_root="/angelix-experiments/gmp/data/$id"
patches_dir="/angelix-experiments/gmp/patches"

mkdir -p $target_root
mkdir -p $patches_dir

debug () {
    local msg="$1"
    echo "[experiment] $msg"
}

#################################################################################

mkdir -p .experiment

for group_size in "${group_sizes[@]}"
do
    for strategy in "${strategies[@]}"
    do
        for version in "${versions[@]}"
        do
            stat_file="$target_root/$version-$strategy-gs${group_size}-statistics.json"
            if [[ -f $stat_file ]]; then
                echo "File exists: $stat_file"
                echo "Skip ..."
                echo "strategy: $strategy"
                echo "version: $version"
                echo "group size: $group_size"
                continue
            else
                echo "Work on ..."
                echo "strategy: $strategy"
                echo "version: $version"
                echo "group size: $group_size"
                rm -rf *.patch
                exp_file=".experiment/$version-$strategy-gs${group_size}.log"
                options="--$strategy --all-suspicious --timeout 14400 --show-suspicious-locations --mcmc-beta 0.8"
                if [[ $group_size == "all" ]]; then
                    options="$options --single-group"
                else
                    options="$options --group-size $group_size"
                fi
                echo "options: $options"
                ./repair manybugs gmp $version $options &> $exp_file
                if [[ $? == 0 ]]; then
                    echo "Finished normally"
                else
                    echo "Finished abnormally"
                fi
                # copy patch
                patch_file_count=`ls -1 *.patch 2>/dev/null | wc -l`
                if [[ $patch_file_count > 0 ]]; then
                    echo "copy patch"
                    mv *.patch $patches_dir &> /dev/null
                else
                    echo "no patch file found"
                fi
                # copy stat file
                src_stat_file=".angelix/statistics.json"
                dst_stat_file="$target_root/$version-$strategy-gs$group_size-statistics.json"
                if [[ -f $src_stat_file ]]; then
                    echo "copy stat file: $dst_stat_file"
                    cp $src_stat_file $dst_stat_file
                fi
                # copy angelic forest
                src_af_file=".angelix/last-angelic-forest.json"
                dst_af_file="$target_root/$version-$strategy-gs$group_size-angelic-forest.json"
                if [[ -f $src_af_file ]]; then
                    echo "copy angelic forest: $dst_af_file"
                    cp $src_af_file $dst_af_file
                else
                    echo "no angelic forest found"
                fi
                # copy log file
                mv $exp_file $target_root
                echo "log file: $target_root/$(basename $exp_file)"

                rm -rf /tmp/*
                for id in $(ps -ef | grep lli | grep load |grep -v grep | awk '{print $2}')
                do
                    kill -9 $id 2> /dev/null
                done
            fi
        done
    done
done
